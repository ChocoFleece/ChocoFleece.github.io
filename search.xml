<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信与TG互通 基于EFB的ComWechat搭建教程</title>
    <url>/2023/10/04/efbwechattg/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><blockquote>
<p>由于众所周知的原因，微信在除了IOS系统上之外，只有一个残废的FCM推送，这个推送会在收到消息时唤醒微信…然后再通过微信的信息通道推送给手机，这完全失去了使用推送的意义。<br>因此有人开始研究将微信的消息转发到Telegram上，这篇文章将为你介绍详细的步骤。</p>
</blockquote>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>首先我们需要明确Tg相比于微信优势在哪里。<br>1.<strong>永久的云端消息记录存储</strong><br>Tg拥有永久的云端消息记录存储，并且按照Tg那边的说法，你的信息是很安全的(这个看个人，详情请搜索Tg信息保护相关内容)。<br>2.<strong>多端登陆账号</strong><br>Tg可以在很多客户端上登陆账号且没有数量限制。你可以在手机上登陆一个、电脑上登陆一个、平板上登陆一个、甚至虚拟机里登陆一个。<br>3.<strong>占用更小、耗电更少</strong><br>Tg拥有十分丝滑的体验，尤其是各种开源的第三方客户端，Tg仅仅只需要占用200M上下的RAM即可，而微信即使没有联系人，也需要占用将近2G的RAM，差距巨大。并且Tg并不需要保留后台，可以享受到推送服务。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>因此将微信的消息转发到Tg上是一个很优秀的方案，同时也可以将Tg与微信的联系人合并方便联系。本文使用了 ComWechat 服务作为从端，使用的 API 为微信桌面端，<strong>这意味着使用此服务将无法使用微信桌面端</strong>，因为微信限制同时只能在线一台设备。如有使用需求请自行考虑，本教程对产生的一切后果不负任何责任。</p>
<h1 id="前提环境"><a href="#前提环境" class="headerlink" title="前提环境"></a>前提环境</h1><p>1.一台在 <strong>国外(或能够进行外网访问)</strong> 的 VPS，架构为 <strong>X86</strong>，ARM 架构大概率无法部署。<br>推荐系统为 <strong>Ubuntu</strong> ，下文以此系统为例<br>要求 VPS 运行内存<strong>不小于 2G</strong>，且最好再开启 2G 的交换内存<br>实测内存占用与微信好友数量成正比，好友数与群聊数相加小于100个的情况下，原生2G内存足矣<br>VPS拥有一个<strong>固定公网 iPv4 地址</strong><br>2. 一台最好系统为 <strong>Windows 的电脑</strong> (需要使用 VNC 服务，其他系统理论也可以)<br>3. 一部拥有微信的手机或<strong>能够进行微信扫码的设备</strong>（扫码登录远程微信用）<br>4. 最好<strong>两个 Telegram 账号</strong>，要求互为好友且至少有一个能正常登陆<br>5. 一个正常的大脑，一双正常的眼睛，善于举一反三的思维<br>6. 在提出问题之前请仔细、反复地再阅读一遍教程</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="创建机器人-Token"><a href="#创建机器人-Token" class="headerlink" title="创建机器人 Token"></a>创建机器人 Token</h2><p>首先在手机 Telegram 或桌面端 Telegram 应用程序中进行如下操作</p>
<ol>
<li>对 <strong>@BotFather</strong> 或点击 <a class="link"   href="https://t.me/BotFather" >这段文字<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 来对 BotFather 进行私聊</li>
<li>发送指令</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/newbot</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li><p>在创建完毕之后，你将获取到一串 Bot 的 <strong>API Token</strong>，将之保存在一处地方，<strong>不要将他泄露给其他人</strong>，因为通过 Token 任何人都可以控制你的 Bot。</p>
</li>
<li><p>然后依据提示进行机器人的用户名、昵称等配置</p>
<blockquote>
<p>机器人用户名须以 bot 结尾</p>
</blockquote>
</li>
<li><p>接着进行两项基础配置，继续向 BotFather 发送下列命令</p>
</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/setprivacy</span><br><span class="line">#选择 “Disable”</span><br><span class="line">/setjoingroups</span><br><span class="line">#选择 “Enable”</span><br><span class="line">/setprivacy</span><br><span class="line">#选择 “Disable”</span><br><span class="line">/setjoingroups</span><br><span class="line">#选择 “Enable”</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>接着进行最后一项配置，发送</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/setcommands</span><br></pre></td></tr></table></figure></div>
<p>然后发送下面的内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">link - 将会话绑定到 Telegram 群组</span><br><span class="line">chat - 生成会话头</span><br><span class="line">recog - 回复语音消息以进行识别</span><br><span class="line">update_info - 更新群组名与头像</span><br><span class="line">extra - 获取更多功能</span><br></pre></td></tr></table></figure></div>

<h2 id="获取用户-ID"><a href="#获取用户-ID" class="headerlink" title="获取用户 ID"></a>获取用户 ID</h2><p>与 @get_id_bot 私聊或点击 <a class="link"   href="https://t.me/get_id_bot" >这段文字<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 来对 Get ID Bot 进行私聊，发送</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/start</span><br></pre></td></tr></table></figure></div>
<p>获取<strong>用户 ID</strong>，将之保存到一处地方</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><p>可不做这一步，一般没问题，速度慢请查询换源相关，或查询VPS带宽限制</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a>安装 Docker-compose</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt -y install docker-compose</span><br></pre></td></tr></table></figure></div>
<p>创建配置文件 docker-compose.yaml</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir comwechat</span><br><span class="line">touch docker-compose.yaml</span><br></pre></td></tr></table></figure></div>
<p>使用vim&#x2F;nano等工具编辑该文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano docker-compose.yaml</span><br></pre></td></tr></table></figure></div>
<p>输入以下内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3.3&#x27;</span><br><span class="line">services:</span><br><span class="line">    wechatpchook:</span><br><span class="line">        container_name: comwechat</span><br><span class="line">        environment:</span><br><span class="line">            - VNCPASS=YourPassword</span><br><span class="line">            - COMWECHAT=https://github.com/ljc545w/ComWeChatRobot/releases/download/3.7.0.30-0.1.0-pre/3.7.0.30-0.1.0-pre.zip</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;/root/WeChat/Files/:/home/user/.wine/drive_c/users/user/My Documents/WeChat Files/&quot;</span><br><span class="line">            - &quot;/root/WeChat/Data/:/home/user/.wine/drive_c/users/user/Application Data/&quot;</span><br><span class="line">        privileged: true</span><br><span class="line">        network_mode: host</span><br><span class="line">        image: tomsnow1999/docker-com_wechat_robot:latest</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>注：大部分 SSH 客户端可以使用右键粘贴剪贴板内容<br>以下内容受时效性影响可能较大，请参照教程时间，自行更换版本，或沿用此版（可能有BUG）</p>
</blockquote>
<p>将其中 <strong>- VNCPASS&#x3D;YourPassword</strong> 中的 <strong>YourPassword</strong> 改为一个你自己喜欢的密码并记住。</p>
<p>若使用nano编辑器则使用 <strong>Ctrl + X</strong> 退出编辑 若提示 <strong>Y&#x2F;N</strong> 请输入 <strong>Y</strong> 保存。<br>然后会提示修改文件名 回车退出即可 不要修改。</p>
<p>其他编辑器请自行保存并退出。</p>
<p>使用 cat 命令检查内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat docker-compose.yaml</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>后文所有编辑的文件均建议检查，不再赘述<br>若新手不习惯命令行操作，可参考以WinSCP为代表的远程文件管理软件，这里不进行教学</p>
</blockquote>
<p>此时检查屏幕中内容无误后按 <strong>ESC</strong> 退出，进行下一步。</p>
<h2 id="启动-Docker-镜像"><a href="#启动-Docker-镜像" class="headerlink" title="启动 Docker 镜像"></a>启动 Docker 镜像</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>
<p>等待下载完成即可，中途<strong>不要关闭 SSH 窗口</strong>，耐心等待即可，文件约几个G。</p>
<h2 id="VNC-登录微信"><a href="#VNC-登录微信" class="headerlink" title="VNC 登录微信"></a>VNC 登录微信</h2><p>在网络上下载并安装 <strong>VNC Viewer</strong>（或其他能进行VNC连接的客户端）<br>在上方 <strong>Enter a VNC Server address or search</strong> 处填入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#你的VPS固定公网ip:5905</span><br><span class="line">#例如</span><br><span class="line">123.123.1.2:5905</span><br><span class="line">#注意「:」是英文字符 不要使用中文字符的「：」</span><br></pre></td></tr></table></figure></div>

<p>点击<strong>连接</strong>到此地址，此时你将会看到一个微信登录二维码，使用手机扫码登录<br>注意，将此二维码截图后用手机微信的相册内扫码是不行的，<strong>必须使用摄像头扫码</strong></p>
<h2 id="安装、创建必要文件及依赖"><a href="#安装、创建必要文件及依赖" class="headerlink" title="安装、创建必要文件及依赖"></a>安装、创建必要文件及依赖</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install libopus0 ffmpeg libmagic1 python3-pip git libssl-dev</span><br><span class="line">pip3 install -U git+https://github.com/ehForwarderBot/efb-telegram-master.git</span><br><span class="line">pip3 install -U git+https://github.com/0honus0/python-comwechatrobot-http.git</span><br><span class="line">pip3 install -U git+https://github.com/0honus0/efb-wechat-comwechat-slave.git</span><br><span class="line">pip3 install lottie</span><br><span class="line">pip3 install cairosvg</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>请一行一行依次执行 而不要全部一次输入</p>
</blockquote>
<p>然后进行配置文件的创建，此处<strong>可以一次性</strong>全部输入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ehforwarderbot/profiles/ComWeChat</span><br><span class="line">mkdir -p ~/.ehforwarderbot/profiles/ComWeChat/blueset.telegram</span><br><span class="line">mkdir -p ~/.ehforwarderbot/profiles/ComWeChat/honus.comwechat</span><br><span class="line">touch ~/.ehforwarderbot/profiles/ComWeChat/config.yaml</span><br><span class="line">touch ~/.ehforwarderbot/profiles/ComWeChat/blueset.telegram/config.yaml</span><br><span class="line">touch ~/.ehforwarderbot/profiles/ComWeChat/honus.comwechat/config.yaml</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>不要忘记发送最后一行</p>
</blockquote>
<h2 id="主从端配置"><a href="#主从端配置" class="headerlink" title="主从端配置"></a>主从端配置</h2><p>编辑 ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;ComWeChat&#x2F;blueset.telegram&#x2F;config.yaml</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.ehforwarderbot/profiles/ComWeChat/blueset.telegram/config.yaml</span><br></pre></td></tr></table></figure></div>

<p>在其中写入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">token: &quot;写机器人token&quot;</span><br><span class="line">admins:</span><br><span class="line">- 写管理员telegram用户ID</span><br></pre></td></tr></table></figure></div>

<p>将token和用户ID替换掉上文中的说明文字，例如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">token: &quot;ABC123QWE:123ADW123AWD&quot;</span><br><span class="line">admins:</span><br><span class="line">- 1234567654321</span><br></pre></td></tr></table></figure></div>

<p>编辑 ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;ComWeChat&#x2F;config.yaml</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.ehforwarderbot/profiles/ComWeChat/config.yaml</span><br></pre></td></tr></table></figure></div>

<p>在其中写入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">master_channel: blueset.telegram</span><br><span class="line">slave_channels:</span><br><span class="line">- honus.comwechat</span><br></pre></td></tr></table></figure></div>

<p>编辑 ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;ComWeChat&#x2F;honus.comwechat&#x2F;config.yaml</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.ehforwarderbot/profiles/ComWeChat/honus.comwechat/config.yaml</span><br></pre></td></tr></table></figure></div>

<p>在其中写入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir: &quot;/root/WeChat/Files/&quot;</span><br></pre></td></tr></table></figure></div>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>使用<strong>screen</strong>功能保证关闭SSH连接后 服务仍在运行</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S wechat</span><br></pre></td></tr></table></figure></div>

<p>在弹出的新终端窗口中输入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ehforwarderbot -p ComWeChat</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>由于 VPS 一般位于海外，所以第一次登录后几天内被登出是正常的，因为 IP 地址不受信任</p>
</blockquote>
<h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><p>在某些情况下，你需要重启你的服务，下面我来讲解一下。</p>
<p>首先建议<strong>重启</strong>你的服务器，排除意外因素<br>如果不愿意重启，请自行关闭之前打开的 screen 会话和 docker 镜像<br>然后执行</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd comwechat</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<p>此时再次打开 VNC Viewer 再次扫码登录或点击登录<br>然后再次启动服务即可</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S wechat</span><br></pre></td></tr></table></figure></div>

<p>在弹出的新终端窗口中输入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ehforwarderbot -p ComWeChat</span><br></pre></td></tr></table></figure></div>

<h1 id="关于机器人用法"><a href="#关于机器人用法" class="headerlink" title="关于机器人用法"></a>关于机器人用法</h1><p>在此不进行详细说明，仅做简单解释</p>
<p><strong>假如你不做任何工作</strong>，所有信息都只会从机器人私聊发送到你的 Telegram 账号。</p>
<p>为了解决这个问题，我们需要使用准备阶段准备的两个 Telegram 账号<strong>新建群组</strong>，然后将另一个账号<strong>踢出群组</strong>，将机器人<strong>添加至群组</strong>。</p>
<p>接着使用</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/link</span><br></pre></td></tr></table></figure></div>

<p>回到机器人的私聊，选择你要绑定的对话，则该对话将被绑定至指定的群组</p>
<p>建议使用下面的指令来更新头像及名称。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/update_info</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>特别注明：<strong>新加好友 &#x2F; 群聊 &#x2F; 备注</strong> 需要等待数据库自动更新，时间为 30 分钟一次，因此执行此命令报错时请先自查是否是新添加好友等问题</p>
</blockquote>
<p>此时你在此群组发送消息，将自动以你登录的微信为发言人在微信发送相同消息，接收到的消息则由机器人发送</p>
<blockquote>
<p>其他使用相关不再赘述，自行查阅其他教程或说明文档等</p>
</blockquote>
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>至此，教程完毕，若有问题请再三阅读教程后提问</p>
]]></content>
      <categories>
        <category>研究</category>
      </categories>
      <tags>
        <tag>研究</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，世界！</title>
    <url>/2023/05/23/hello,world!/</url>
    <content><![CDATA[<h1 id="网站基本说明"><a href="#网站基本说明" class="headerlink" title="网站基本说明"></a>网站基本说明</h1><p>2023年5月23日 20:00，本站正式建立，使用Github Page作为服务提供商。<br>本站属于个人性质网站，不存在主动盈利行为。</p>
<p>Front-matter示例：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 你好，世界！</span><br><span class="line"><span class="built_in">date</span>: 2023-05-23 20:57:13</span><br><span class="line">updated: 2023-05-23 20:57:13</span><br><span class="line">tags: </span><br><span class="line">    - 建站</span><br><span class="line">categories: </span><br><span class="line">    - 建站</span><br><span class="line">description: 建站时，测试用的文章</span><br><span class="line">thumbnail: /images/default_cover.webp  <span class="comment">#首页缩略图、文章头图</span></span><br><span class="line">expires: 2023-08-31 23:59:59  <span class="comment">#超过本时间提示文章可能过时</span></span><br><span class="line"><span class="comment"># excerpt: &quot;这里是显示的摘要，可不填，自动生成&quot;</span></span><br><span class="line"><span class="comment"># sticky: 1 #数字越大文章越靠前</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux下安装带浏览器源的OBS</title>
    <url>/2023/10/12/linuxobsbrowser/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><blockquote>
<p>在ArchLinux下通过pacman安装的obs-studio软件包默认是不在<strong>来源</strong>页包含<strong>浏览器</strong>源的选项支持的。而我们需要用到的时候就需要为OBS添加浏览器源的支持。<br>虽然默认的obs-studio包不提供这个插件，但可以通过其他客户端或插件包添加。</p>
</blockquote>
<h3 id="推荐方案1"><a href="#推荐方案1" class="headerlink" title="推荐方案1"></a><strong>推荐方案1</strong></h3><p>安装使用<a class="link"   href="https://github.com/obsproject/obs-browser" >浏览器插件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>进行编译的官方包。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S obs-studio-git</span><br></pre></td></tr></table></figure></div>

<h3 id="推荐方案2"><a href="#推荐方案2" class="headerlink" title="推荐方案2"></a><strong>推荐方案2</strong></h3><p>这是一款定制的客户端，提供浏览器插件以及浏览器停靠栏，还有其他改进。不过如果能够满足自己的需求的话，依然是官方包最佳。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S obs-studio-tytan652</span><br></pre></td></tr></table></figure></div>


<h3 id="不推荐方案"><a href="#不推荐方案" class="headerlink" title="不推荐方案"></a><strong>不推荐方案</strong></h3><p>打包的支持浏览器插件集成的OBS</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#任选</span><br><span class="line">yay -S obs-studio-browser</span><br><span class="line">yay -S obs-linuxbrowser</span><br></pre></td></tr></table></figure></div>

<p>安装其中第一个版本的话：提供linuxbrowser旧插件。该插件可与默认客户端一起使用，但已被放弃且过时。</p>
<p>安装其中第二个版本的话：编译可能要很久(大约10分钟)。</p>
<p>参考：ArchLinux的<a class="link"   href="https://wiki.archlinuxcn.org/wiki/Open_Broadcaster_Software" >Wiki页面<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>研究</category>
      </categories>
      <tags>
        <tag>研究</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux下OBS捕获单应用音频的解决方案</title>
    <url>/2023/10/03/linuxobscapture/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><blockquote>
<p>起因十分简单，我在几个月前转用ArchLinux作为主力系统使用，逐渐适应并喜爱上了Linux生态。然而Linux常常处于不被消费级软件重视的地位，这使得很多时候我们需要自己解决问题。比如我试图在Linux下直播我的游戏，但是同时我又要和朋友语音通话，为了不录入我自己和朋友的声音到直播中 <del class="mask">社恐.gif</del> 我开始按照Windows的思路试图捕获单个应用音频，此时我发现这项功能仅仅在Windows版本的OBS中进行测试，而Linux下是没有这个功能的，经过一番探索和交流，获得了两个比较泛用的方案。</p>
</blockquote>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>下面来介绍一下我的ArchLinux环境<br>N卡、最新系统、AMD的CPU等等，这些不需要提，也不相关的内容。桌面环境KDE，渲染用的X11，这些有一点关系，但不大。<br><strong>音频系统Pipewire</strong>，这个很重要，因为<strong>本文仅针对Pipewire生效</strong>。</p>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>一共有两种方案，下面我来分别介绍一下。</p>
<blockquote>
<p>我个人是比较推荐<strong>方案一</strong>的，两种方案各有优缺点，下面将详细说明。</p>
</blockquote>
<h2 id="方案一-OBS插件"><a href="#方案一-OBS插件" class="headerlink" title="方案一 OBS插件"></a>方案一 OBS插件</h2><blockquote>
<p>使用Github开源的OBS插件<a href="https://github.com/dimtpap/obs-pipewire-audio-capture"><strong>obs-pipewire-audio-capture</strong></a></p>
</blockquote>
<p>这种方案的优点是配置简单，缺点则是可能随着某次音频驱动的更新，该方案失效，当然可能性微乎其微，同时插件肯定也会跟进更新，因此基本没有什么缺点。</p>
<h3 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h3><h3 id="1-WirePlumber"><a href="#1-WirePlumber" class="headerlink" title="1. WirePlumber"></a><strong>1. WirePlumber</strong></h3><p>ArchLinux下安装WirePlumber的命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wireplumber</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>前提：安装了pipewire才建议使用此方案<br>ArchLinux安装pipewire的指令如下（可能不全）</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S pipewire pipewire-pulse</span><br></pre></td></tr></table></figure></div>

<h3 id="2-OBS-28-0或更高版本"><a href="#2-OBS-28-0或更高版本" class="headerlink" title="2. OBS 28.0或更高版本"></a><strong>2. OBS 28.0或更高版本</strong></h3><p>你可以直接使用pacman安装OBS</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S obs-studio</span><br></pre></td></tr></table></figure></div>

<p>当然，如果是打算使用哔哩哔哩进行直播，又希望显示弹幕的话，多半会去安装弹幕工具，而弹幕工具一般需要添加浏览器来源。</p>
<p><strong>推荐</strong>：安装使用浏览器插件进行编译的官方包。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S obs-studio-git</span><br></pre></td></tr></table></figure></div>

<p><strong>不推荐</strong>：打包的支持<a class="link"   href="https://aur.archlinux.org/packages/obs-studio-browser" >浏览器插件集成的OBS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>安装这个版本的话，编译可能要很久(大约10分钟)<br>这个版本将<strong>ffmpeg</strong>替换为了<strong>ffmpeg-obs</strong>，这可能导致很多问题，维护需要大量精力。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S obs-studio-browser </span><br></pre></td></tr></table></figure></div>


<h3 id="安装、使用插件"><a href="#安装、使用插件" class="headerlink" title="安装、使用插件"></a>安装、使用插件</h3><p>从<a href="https://github.com/dimtpap/obs-pipewire-audio-capture"><strong>obs-pipewire-audio-capture</strong></a>仓库的发行版下载<strong>linux-pipewire-audio-[版本号].tar.gz</strong>文件<br>解压到OBS的插件目录，一般为 <strong>~&#x2F;.config&#x2F;obs-studio&#x2F;plugins&#x2F;</strong><br>解压后重启OBS或重启电脑，即可在OBS添加来源处看到可以添加的三个来源</p>
<p>这三个来源我们只需要使用第一个 <strong>应用音频捕获(PipeWire)</strong> 即可。</p>
<p>添加来源后，第一个选项 <strong>Match Priority</strong> 不需要修改，修改下方 <strong>Application</strong> 处，将需要捕获的应用加入。</p>
<blockquote>
<p>如果发现找不到需要的那个应用，再尝试修改 <strong>Match Priority</strong> 的选项，这会改变获取应用的方式。</p>
</blockquote>
<p>下面的可勾选项的效果为，录制除选中应用音频之外的全部音频（反选音频）。</p>
<p>至此，插件的安装和使用就介绍完毕了。</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>最常见的问题就是程序并没有成功的录制应用音频了，此时请检查环境需求中的WirePlumber是否被成功安装？以及你的音频驱动是否是PipeWire。<br>如果发现没有存在这些问题，检查安装后是否重启过电脑？若没有则重启再尝试。</p>
<p>如果还是不行，请参考方案二。</p>
<h2 id="方案二-音频跳线"><a href="#方案二-音频跳线" class="headerlink" title="方案二 音频跳线"></a>方案二 音频跳线</h2><p>这是一个比较麻烦的方法，这里不会详细介绍。<br>但我会对简单的使用方法进行说明。</p>
<p>首先，在OBS来源中添加 <strong>JACK 输入客户端</strong> 并勾选 <strong>启动 JACK 服务器</strong>。<br>然后，安装类似 <strong>Helvum</strong> 的音频跳线软件，或通过其他方式进行音频跳线。</p>
<p>Helvum界面预览，<del class="mask">一团糟</del> 当然，这是因为我有独立声卡，外加配置了后期音频处理的结果。<br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.514.live/img/helvum.png"
                      alt="Helvum"
                ><figcaption>Helvum</figcaption></figure></p>
<p>将需要捕获的应用与 <strong>JACK输入</strong> 相连，此时OBS中 <strong>JACK 输入客户端</strong> 将捕获到被连接的应用音频。</p>
<p>缺点：每次需要手动配置，但可以通过开机执行一些指令，或添加一些配置文件来固化这个操作。<br>优点：没有其他解决方案时的万能解，紧急情况没有安装插件的救济措施，以及也许<strong>可能更低</strong>的音频延迟</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我个人还是推荐方案一，简单好用，也能够满足大部分情况了。<br>至于方案二，留作一个备用的应急解决方案好了，当然如果你有强烈的强迫症或者奇怪的精神洁癖，你可以考虑深入研究一下…</p>
]]></content>
      <categories>
        <category>研究</category>
      </categories>
      <tags>
        <tag>研究</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置一个简单实用且干净的zsh</title>
    <url>/2025/07/09/zsgconfig/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然在 oh-my-zsh 是 zsh 最著名的扩展，但其添加了相当多我用不到的内容，这可能导致终端启动带有延迟，以及一些我不喜欢的高亮等等。<br>并且，我个人更加喜欢自己定义的内容，因此有了此文。此文可以让我仅配置三个简单的功能插件</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>请先安装 <strong>zsh</strong> 并切换默认 Shell 至 <strong>&#x2F;bin&#x2F;zsh</strong></p>
<blockquote>
<p>可通过<code> chsh -l</code>查看所有可用的 Shell</p>
</blockquote>
<p>若安装了 <strong>oh-my-zsh</strong> 请先卸载</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="创建配置文件夹"><a href="#创建配置文件夹" class="headerlink" title="创建配置文件夹"></a>创建配置文件夹</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p .zsh/plugins</span><br><span class="line">cp .zshrc .zsh/</span><br><span class="line">mv .zsh_history .zsh/</span><br></pre></td></tr></table></figure></div>

<h2 id="编辑-zshrc"><a href="#编辑-zshrc" class="headerlink" title="编辑 .zshrc"></a>编辑 .zshrc</h2><p><strong>如果直接使用本仓库的文件的话，默认已经设置完毕</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">### ZSH HOME</span><br><span class="line">export ZSH=$HOME/.zsh</span><br><span class="line"></span><br><span class="line">### ---- history config ----------</span><br><span class="line">export HISTFILE=$ZSH/.zsh_history</span><br><span class="line"></span><br><span class="line"># How many commands zsh will load to memory.</span><br><span class="line">export HISTSIZE=10000</span><br><span class="line"></span><br><span class="line"># How maney commands history will save on file.</span><br><span class="line">export SAVEHIST=10000</span><br><span class="line"></span><br><span class="line"># History won&#x27;t save duplicates.</span><br><span class="line">setopt HIST_IGNORE_ALL_DUPS</span><br><span class="line"></span><br><span class="line"># History won&#x27;t show duplicates on search.</span><br><span class="line">setopt HIST_FIND_NO_DUPS</span><br></pre></td></tr></table></figure></div>

<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .zsh/plugins</span><br><span class="line"></span><br><span class="line">git clone git@github.com:zdharma-continuum/fast-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line">git clone git@github.com:zsh-users/zsh-autosuggestions.git</span><br><span class="line"></span><br><span class="line">git clone git@github.com:zsh-users/zsh-completions.git</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>若此处报错请自行配置公钥，或更换HTTP方式clone</p>
</blockquote>
<h2 id="继续添加配置到-zshrc"><a href="#继续添加配置到-zshrc" class="headerlink" title="继续添加配置到 .zshrc"></a>继续添加配置到 .zshrc</h2><p><strong>如果直接使用本仓库的文件的话，默认已经设置完毕</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $ZSH/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh</span><br><span class="line">fpath=($ZSH/plugins/zsh-completions/src $fpath)</span><br><span class="line"></span><br><span class="line"># zsh-autosuggestions:config</span><br><span class="line">source $ZSH/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&quot;fg=#647696,underline&quot;</span><br><span class="line">ZSH_AUTOSUGGEST_STRATEGY=(history completion)</span><br><span class="line">ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20</span><br><span class="line"></span><br><span class="line">export PROMPT=&#x27;[%n]$ &#x27;</span><br></pre></td></tr></table></figure></div>

<h2 id="创建符号链接"><a href="#创建符号链接" class="headerlink" title="创建符号链接"></a>创建符号链接</h2><p>先删除家目录下的 <strong>.zshrc</strong> 文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm ~/.zshrc</span><br></pre></td></tr></table></figure></div>

<p>创建符号链接</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s ~/.zsh/.zshrc ~/.zshrc</span><br></pre></td></tr></table></figure></div>
<hr>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zshpreview.png"
                     
                ></p>
<hr>
<h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><p><strong>三个 Plugins 对应的 repository</strong></p>
<p><a class="link"   href="https://github.com/zdharma-continuum/fast-syntax-highlighting" >https://github.com/zdharma-continuum/fast-syntax-highlighting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/zsh-users/zsh-autosuggestions" >https://github.com/zsh-users/zsh-autosuggestions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/zsh-users/zsh-completions" >https://github.com/zsh-users/zsh-completions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>研究</category>
      </categories>
      <tags>
        <tag>研究</tag>
      </tags>
  </entry>
</search>
