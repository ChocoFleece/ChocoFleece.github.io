<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「四」Python3笔记</title>
      <link href="/2023/06/05/6-PythonNotes4/"/>
      <url>/2023/06/05/6-PythonNotes4/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3基本数据类型"><a href="#Python3基本数据类型" class="headerlink" title="Python3基本数据类型"></a>Python3基本数据类型</h1><p><strong>Python3 中常见的数据类型有：</strong></p><p>int (整数)</p><p>float (浮点数)</p><p>complex (复数)</p><p>bool (布尔)</p><p>String（字符串）</p><p>List（列表）</p><p>Tuple（元组）</p><p>Set（集合）</p><p>Dictionary（字典）</p><hr><h2 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number 数字"></a>Number 数字</h2><p>Python中数字有四种类型：<strong>整数、布尔型、浮点数和复数。</strong></p><p><strong>int: 如1</strong></p><p>Python中只有一种整型int，表示为长整型，没有Long等。</p><blockquote><p>需要强调的是，Python3中的int几乎<strong>不存在上限</strong>，其位数上限远远超出了10^10000000还不止，因此不需要考虑C中存在的上限问题。(C语言的int计算题真是折磨人)</p></blockquote><p><strong>bool</strong>: <strong>仅有True、False</strong></p><blockquote><p>在为布尔型赋值时，以下值将会变为False：’’、””、’’’’’’、””””””、0、()、[]、{}、None、0.0、0L、0.0+0.0j、False。其余不论赋任何值，bool的数据均将存储为True。</p></blockquote><p>float: 如 1.23、3E-2、3.0</p><p>complex: 如 1 + 2j、 1.1 + 2.2j</p><blockquote><p>特殊：bool 是 int 的子类，True 和 False 可以和数字相加，其中True&#x3D;1、False&#x3D;0</p></blockquote><h1 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h1><p>5 + 4加法</p><p>1.1 - 2减法</p><p>3 * 7乘法</p><p>2 &#x2F; 4除法，得到一个浮点数0.5</p><p>2 &#x2F;&#x2F; 4除法，得到一个整数0</p><p>17 % 3 取余，得到2</p><p>2 ** 5 乘方，得到32</p><blockquote><p>在混合计算时，Python会把整型转换成为浮点数。例如10-1.1会被转换为10.0-1.1，得到结果为浮点数，值为8.9</p></blockquote><h1 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h1><p>被单引号或双引号括起来的内容为字符串。在执行时不会考虑其中的任何代码，仅仅将内容当做一串完整的数据使用，不进行任何处理。</p><h2 id="字符串运算、切片"><a href="#字符串运算、切片" class="headerlink" title="字符串运算、切片"></a>字符串运算、切片</h2><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p>加号 <code>+</code> 是字符串的连接符， 星号 <code>*</code> 表示复制当前字符串，与之结合的数字为复制的次数。</p><h3 id="字符串切片：变量-头-尾"><a href="#字符串切片：变量-头-尾" class="headerlink" title="字符串切片：变量[头:尾]"></a>字符串切片：变量[头:尾]</h3><p><img src="https://img.514.live/img/202306050242813.png"></p><p>从左往右第一个字符表示为0，依次增加</p><p>从右往左第一个字符表示为-1，依次减少</p><p>例如<code>你好世界</code>，中“你”字可以用0或-4表示，“好”字可以用1或-3表示</p><p>“世”字可以用2或-2表示，“界”字可以用3或-1表示。</p><h4 id="当需要进行范围切片时："><a href="#当需要进行范围切片时：" class="headerlink" title="当需要进行范围切片时："></a>当需要进行范围切片时：</h4><p>使用<code>:</code>进行首尾分隔</p><p>实例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str = &#x27;Runoob&#x27;</span><br><span class="line"></span><br><span class="line">print (str)          # 输出字符串</span><br><span class="line">print (str[0:-1])    # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print (str[0])       # 输出字符串第一个字符</span><br><span class="line">print (str[2:5])     # 输出从第三个开始到第五个的字符</span><br><span class="line">print (str[2:])      # 输出从第三个开始的后的所有字符</span><br><span class="line">print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)</span><br><span class="line">print (str + &quot;TEST&quot;) # 连接字符串</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">RunoobTEST</span><br></pre></td></tr></table></figure><blockquote><p>Python中没有char这种单独的字符数据类型，一个单独的字符就是一个长度为1的字符串。与 C 字符串不同的是，Python 字符串不能被赋值。向字符串的一个位置赋值，比如 str[0] &#x3D; ‘x’ 会导致错误。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「三」Python3笔记</title>
      <link href="/2023/06/05/5-PythonNotes3/"/>
      <url>/2023/06/05/5-PythonNotes3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3基础语法"><a href="#Python3基础语法" class="headerlink" title="Python3基础语法"></a>Python3基础语法</h1><blockquote><p>本教程并不一定会详细的写出语句的详细可选参数，仅进行简单且必要的参数说明，详细的可选参数请参考具体语句的官方文档或参考其他教程、汇总。</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量如同一个盒子，其中可以存放数据，变量名的命名遵从之前提到的标识符命名规则。</p><p>等号<code>=</code>用于给变量<strong>赋值</strong>，其表示将右侧的数据赋值给左侧的变量，等号右边<strong>可以</strong>也是一个<strong>变量</strong>，但等号左边<strong>不可以</strong>是一个具体的数据。请注意在编程中等号<strong>大多</strong>意味着<strong>赋值</strong>而非<strong>数学</strong>意义上的<strong>相等</strong>。</p><blockquote><p>Python3中的变量<strong>不需要声明</strong>。每个变量在<strong>使用前</strong>都<strong>必须赋值</strong>，变量<strong>赋值以后</strong>该变量<strong>才会</strong>被<strong>创建</strong>。允许<strong>同时</strong>赋值多个变量。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = 100</span><br><span class="line">b = 10.0</span><br><span class="line">c = &quot;你好&quot;</span><br><span class="line">d = &#x27;你好&#x27;</span><br><span class="line"></span><br><span class="line">x = y = z = 1</span><br><span class="line">o = p = q = 9, 8, &quot;hi&quot;</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line">print(o)</span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">10.0</span><br><span class="line">你好</span><br><span class="line">你好</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">hi</span><br></pre></td></tr></table></figure><p>Python中，变量将会根据初始赋值的形式决定变量存储的数据类型，如上实例中，a b c d内分表存储了int类、float类、string类、string类。</p><blockquote><p><strong>注意：在Python3中，双引号和单引号的作用完全相同。</strong> 都可以用于提示字符串(string)的赋值。</p></blockquote><h2 id="Print语句"><a href="#Print语句" class="headerlink" title="Print语句"></a>Print语句</h2><p>基本写法：<code>print()</code></p><p>Print语句用于在屏幕上输出其中的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=&quot;a&quot;</span><br><span class="line">y=&quot;b&quot;</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(&#x27;---------&#x27;)</span><br><span class="line"></span><br><span class="line">print(x,end=&quot; &quot;)</span><br><span class="line">print(y,end=&quot; &quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><blockquote><p>Print语句中，可以通过加入参数<code>end</code>来指定语句输出的末尾字符。在直接使用print语句时，若<strong>不进行</strong>末尾参数指定，则会<strong>默认</strong>输出<strong>换行符</strong>，请尤其注意，这点和C语言不同。<strong>特殊情况</strong>：不进行任何参数填写，则不会进行任何输出。</p></blockquote><p>以上实例的输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><p>通常地，end参数<strong>一般</strong>指定为<strong>字符串</strong>。以上实例中指定为空格字符，因此第二个a、b中并没有换行而是空格。</p><h2 id="Input语句"><a href="#Input语句" class="headerlink" title="Input语句"></a>Input语句</h2><p>基本写法：<code>input()</code></p><p>Input语句用于在终端中获取用户输入，在需要用户输入的时候，体现为光标闪动，用户输入完数据应使用 <kbd>Enter</kbd> 键来提示计算机输入完成。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input(&quot;Hi~&quot;)</span><br><span class="line">a = input(&quot;你好:\n&quot;)</span><br><span class="line">b = int(input(&quot;\n请输入一个整数：\n&quot;))</span><br><span class="line">print(&quot;\n\n&quot;)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><blockquote><p>在Input语句中，小括号中可以指定字符串，作为在控制台输出显示到屏幕中的语句，一般用于用户交互提示使用。</p></blockquote><p>注意：input()函数<strong>默认不会</strong>将内容存储到<strong>任何变量</strong>中，因此请指定一个变量进行存储。<strong>尤其注意的是</strong>，该函数<strong>默认</strong>从用户输入处接收到的数据类型为<strong>字符串</strong>，如果需要使用其他数据类型请如上方实例一样指定数据类型方便后续处理。</p><p>以上实例执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hi~你好:</span><br><span class="line">你好！</span><br><span class="line"></span><br><span class="line">请输入一个整数：</span><br><span class="line">12345</span><br><span class="line"></span><br><span class="line">你好</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><blockquote><p>注意，字符串类型并非不能存储数字，而是进行数据处理时，字符串不应进行数学运算。若一个变量内仅有整数，则该变量理应使用int型。</p></blockquote><h2 id="同行显示多条语句"><a href="#同行显示多条语句" class="headerlink" title="同行显示多条语句"></a>同行显示多条语句</h2><p>使用分号<code>;</code>分隔语句，以允许在单行中编写多行语句。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = 10 ; y = x+1 ; print(y)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(假设叫<strong>somemodule</strong>)导入，格式为：<br><code>import somemodule</code></p><p>从模块中导入<strong>某个函数</strong>,格式为：<br><code>from somemodule import somefunction</code></p><p>从模块中导入<strong>多个函数</strong>,格式为：<br><code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将模块中的<strong>全部函数</strong>导入，格式为： <code>from somemodule import *</code></p><p>from…import *语句与直接import整个库的区别在于</p><blockquote><p>import 导入，每次使用模块中的函数都要声明是哪个模块。</p></blockquote><blockquote><p>from…import * 导入，每次使用模块中的函数，直接使用就可以了。</p></blockquote><p>正常的，import语句需要写在程序最开头的部分，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「二」Python3笔记</title>
      <link href="/2023/06/04/4-PythonNotes2/"/>
      <url>/2023/06/04/4-PythonNotes2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：本文仅针对Windows11环境下，使用VSCode编辑器进行基础的Python3的学习、练习。出现问题请先检查自己的系统版本与软件版本。</p></blockquote><hr><h1 id="Python3基础"><a href="#Python3基础" class="headerlink" title="Python3基础"></a>Python3基础</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 <strong>Unicode</strong> 字符串</p><p><strong>简体中文</strong>语言环境的<strong>Windows系统</strong>下，命令提示符的默认编码为<strong>GBK</strong>，而非<strong>UTF-8</strong>，因此请务必使用<strong>VSCode</strong>等<strong>专业代码工具</strong>进行代码编写，<strong>而非记事本</strong>！</p><blockquote><p>你可以在<strong>代码前</strong>添加<strong>声明</strong>来修改解释器对于本文件<strong>默认使用的编码</strong>，如下展示了三种常用写法表示使用<strong>GBK编码</strong>进行解释。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: GBK -*-</span><br><span class="line"># coding=GBK</span><br><span class="line"># coding: GBK</span><br></pre></td></tr></table></figure><h2 id="标识符与保留字"><a href="#标识符与保留字" class="headerlink" title="标识符与保留字"></a>标识符与保留字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a><strong>标识符</strong></h3><p>即常用的变量名、类名等等，要求如下：</p><p>1.使用 <code>字母</code> 或 <code>下划线</code> 作为首字符。</p><p>2.使用 <code>字母</code> <code>数字</code> <code>下划线</code> 作为其余字符。</p><p>3.区分大小写、没有长度限制、不能使用Python保留字</p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>即常说的<strong>关键字</strong>，不能作为<strong>标识符</strong>名称使用。</p><p>目前的<strong>全部关键字</strong>可以通过如下命令来显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import keyword</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><blockquote><p>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p></blockquote><p>方括号内，每个单引号中都是一个Python3保留字，以后会讲解其中大部分保留字的作用。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>Python3中单行注释以 <code>#</code> 开头，下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我是一行注释，我不会被解释器解释，可以写入任何字符，直到下一行为止</span><br><span class="line">print(&quot;Hello, World!&quot;) # 也可以在代码后进行注释，直到下一行为止</span><br></pre></td></tr></table></figure><p>输出结果为：<br><code>Hello, World!</code></p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释可以使用多个单行注释，或者直接使用多行注释符号 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>，下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#第一个注释</span><br><span class="line">#第二个注释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">第三个注释</span><br><span class="line">第四个注释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">第五个注释</span><br><span class="line">第六个注释</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><p>输出结果为：<br><code>Hello, World!</code></p><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><blockquote><p>Python<strong>最鲜明</strong>的<strong>特点</strong>就是其通过<strong>缩进</strong>来表示代码块，<strong>无需且不能</strong>使用大括号来表示。</p></blockquote><p>Python中，缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p><blockquote><p>然而，通常使用四个空格表示一个缩进，如果可以，进行重要代码编写时请不要使用制表符<kbd>Tab</kbd>输入缩进，因为这可能在某些设备的某些环境上出现各种奇奇怪怪的问题，不过一般不需要注意，例如在VSCode中，制表符会被自动转换成四个空格字符。</p></blockquote><p>下面是一个使用缩进的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if True:</span><br><span class="line">    print(&quot;True&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;False&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>如果缩进空格数不一，会导致程序报错，排查时请尤其注意缩进关系。</p></blockquote><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><blockquote><p>通常，进行代码编写时都会将一行代码完整的写在一行，然而，如果单行语句过长，我们可以像如下例子中一样使用反斜杠<code>\</code>将一行代码分隔成多行语句进行编写。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = this_is_word1 + this_is_word2 + \</span><br><span class="line">    this_is_word3 + \</span><br><span class="line">    this_is_word4</span><br></pre></td></tr></table></figure><p>特别地，在 <code>[]</code>, <code>&#123;&#125;</code>,  <code>()</code> 中的多行语句，不需要使用反斜杠<code>\</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = [&quot;this_is_word1&quot;, &quot;this_is_word2&quot;, </span><br><span class="line">    &quot;this_is_word3&quot;,&quot;this_is_word4&quot;]</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>空行<strong>并不是</strong> Python3 语法的一部分，在Python中，任何时候，一段正确的代码不插入空行，程序运行也<strong>不会出错</strong>。但是空行的作用在于分隔两段不同功能或含义的代码，<strong>便于日后代码的维护或重构。</strong></p><hr><p>本文介绍了Python3中的部分基础知识，这些知识虽然基础，但是是学习Python的必备知识。</p>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「一」Python3笔记</title>
      <link href="/2023/06/01/3-PythonNotes1/"/>
      <url>/2023/06/01/3-PythonNotes1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：本文仅针对Windows11环境下，使用VSCode编辑器进行基础的Python3的学习、练习。出现问题请先检查自己的系统版本与软件版本。</p></blockquote><hr><h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h3 id="检查电脑是否已有Python环境"><a href="#检查电脑是否已有Python环境" class="headerlink" title="检查电脑是否已有Python环境"></a>检查电脑是否已有Python环境</h3><p>使用快捷键 <kbd>Windows</kbd> + <kbd>R</kbd> ，输入 <strong>wt</strong> ，回车进入<strong>Windows Terminal</strong>，选择打开 <strong>「命令提示符」</strong></p><p>输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>如下图所示提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Python 3.11.3</span><br></pre></td></tr></table></figure><p><img src="https://img.514.live/img/20230601183545.png"></p><p>即表明你的电脑存在版本号为3.11.3的Python环境。</p><p>此时请注意观察版本号，Python2与2020年就停止了更新，<strong>请务必使用Python3进行学习，因为Python3与Python2的语法有一定区别</strong>。</p><blockquote><p>后续文章中提及的Python均为Python3，若不强调为Python2，则一般默认Python为Python3。</p></blockquote><p>如果发现拥有Python3.5以前的版本，都建议进行更新，最简单的方法就是直接完全卸载当前的旧版本Python，再重新安装最新的Python3版本。</p><p>截止至本文发布时，博主已知的Python3最新版本号为<strong>3.11.3</strong>。</p><h2 id="安装Python3"><a href="#安装Python3" class="headerlink" title="安装Python3"></a>安装Python3</h2><p>这里只推荐两种安装方式</p><h3 id="Microsoft-Store安装"><a href="#Microsoft-Store安装" class="headerlink" title="Microsoft Store安装"></a>Microsoft Store安装</h3><p><img src="https://img.514.live/img/202306011853581.png"></p><p>在微软商店中搜索Python3，寻找到最新的版本(例如3.11)进行安装即可。</p><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><p>进入<a href="https://www.python.org/downloads/">Python官网</a>，点击如下图所示的<strong>Download Python 3.xx.x</strong></p><p><img src="https://img.514.live/img/202306011903942.png"></p><p>下载完成后运行下载下来的文件，依照需求安装即可，请不要忘记配置环境变量。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>摆烂，VSCode内随便点点就行了</p><hr><h1 id="Python3简介"><a href="#Python3简介" class="headerlink" title="Python3简介"></a>Python3简介</h1><p><strong>Python</strong>是一种<strong>解释型</strong>，<strong>交互式</strong>，<strong>面向对象语言。</strong></p><p><strong>解释型</strong>：无需进行编译，直接通过解释器解释</p><p><strong>交互式</strong>：可以在Python命令行中直接执行代码</p><p><strong>面向对象</strong>：这意味着Python支持面向对象的风格或代码封装在对象的编程技术</p>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于东京的天气...</title>
      <link href="/2023/05/25/2-tokyounotenki/"/>
      <url>/2023/05/25/2-tokyounotenki/</url>
      
        <content type="html"><![CDATA[<h1 id="東京都の天気"><a href="#東京都の天気" class="headerlink" title="東京都の天気"></a>東京都の天気</h1><h3 id="据我到东京这么长时间以来的观察，东京的天气大概只有两种…"><a href="#据我到东京这么长时间以来的观察，东京的天气大概只有两种…" class="headerlink" title="据我到东京这么长时间以来的观察，东京的天气大概只有两种…"></a>据我到东京这么长时间以来的观察，东京的天气大概只有两种…</h3><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p><img src="https://img.514.live/img/202305252004824.png"><br>一种是这样的，很凉快，很好看，风不算大。</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p><img src="https://img.514.live/img/tokyounotenki2.png"><br>另一种就是这样的，相当的亮，风特别特别大，但是也不怎么热。</p><p><del>其实最大的特点是云动的特别快</del></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，世界！</title>
      <link href="/2023/05/23/1-hello,world!/"/>
      <url>/2023/05/23/1-hello,world!/</url>
      
        <content type="html"><![CDATA[<h1 id="网站基本说明"><a href="#网站基本说明" class="headerlink" title="网站基本说明"></a>网站基本说明</h1><p>2023年5月23日 20:00，本站正式建立，使用Github Page作为服务提供商。<br>本站属于个人性质网站，不存在主动盈利行为。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;new post&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
